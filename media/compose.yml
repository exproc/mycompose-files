services:
  sab:
  #news
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sab
    hostname: sab
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - ${APP_PATH}sabnzbd:/config
      - ${DATA_PATH}usenet:/data/usenet
    networks:
     #- socket
     - proxy

    #ports:
    #  - 80:80
    restart: unless-stopped

    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.sab.rule=Host(`sab.${DOMAINN}`)"
    - "traefik.http.services.sab.loadbalancer.server.port=8080"
    - "traefik.http.routers.sab.entrypoints=https"
    - "traefik.http.routers.sab.tls=true"
    - "traefik.http.routers.sab.tls.certresolver=le"



    
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    hostname: prowlarr
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - ${APP_PATH}prowlarr:/config

    networks:
     #- socket
     - proxy
    #ports:
      #- 9696:9696
    restart: unless-stopped

    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.prowlarr.rule=Host(`pro.${DOMAINN}`)"
    - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
    - "traefik.http.routers.prowlarr.entrypoints=https"
    - "traefik.http.routers.prowlarr.tls=true"
    - "traefik.http.routers.prowlarr.tls.certresolver=le"


  readarr:
  #books
      image: lscr.io/linuxserver/readarr:develop
      container_name: readarr
      hostname: readarr
      environment:
        - PUID
        - PGID
        - TZ
      volumes:
        - ${APP_PATH}readarr:/config
        - ${DATA_PATH}:/data/:rw
  
      networks:
       #- socket
       - proxy
      #ports:
        #- 8787:8787
      restart: unless-stopped
  
      labels:
      - "traefik.enable=true"
      - "traefik.http.routers.readarr.rule=Host(`book.${DOMAINN}`)"
      - "traefik.http.services.readarr.loadbalancer.server.port=8787"
      - "traefik.http.routers.readarr.entrypoints=https"
      - "traefik.http.routers.readarr.tls=true"
      - "traefik.http.routers.readarr.tls.certresolver=le"

  radarr:
  #music
      image: lscr.io/linuxserver/radarr:latest
      container_name: radarr
      hostname: radarr
      environment:
        - PUID
        - PGID
        - TZ
      volumes:
        - ${APP_PATH}radarr:/config
        - ${DATA_PATH}:/data/:rw
  
      networks:
       #- socket
       - proxy
      #ports:
        #- 7878:7878
      restart: unless-stopped
  
      labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`mv.${DOMAINN}`)"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      - "traefik.http.routers.radarr.entrypoints=https"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.tls.certresolver=le"


  lidarr:
  #movies
        image: lscr.io/linuxserver/lidarr:latest
        container_name: liddarr
        hostname: lidarr
        environment:
          - PUID
          - PGID
          - TZ
        volumes:
          - ${APP_PATH}lidarr:/config
          - ${DATA_PATH}:/data/:rw
    
        networks:
         #- socket
         - proxy
        #ports:
          #- 8686:8686
        restart: unless-stopped
    
        labels:
        - "traefik.enable=true"
        #- traefik.http.routers.lidarr.middlewares=chain-basic-auth@file
        - "traefik.http.routers.lidarr.rule=Host(`mu.${DOMAINN}`)"
        - "traefik.http.services.liddarr.loadbalancer.server.port=8686"
        - "traefik.http.routers.lidarr.entrypoints=https"
        - "traefik.http.routers.lidarr.tls=true"
        - "traefik.http.routers.lidarr.tls.certresolver=le"



  sonarr:
        image: lscr.io/linuxserver/sonarr:latest
        container_name: sonarr
        hostname: sonarr
        environment:
          - PUID
          - PGID
          - TZ
        volumes:
          - ${APP_PATH}sonarr:/config
          - ${DATA_PATH}:/data/:rw

    
        networks:
         #- socket
         - proxy
        #ports:
          #- 8989:8989
        restart: unless-stopped
    
        labels:
        - "traefik.enable=true"
        - "traefik.http.routers.sonarr.rule=Host(`tv.${DOMAINN}`)"
        - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
        - "traefik.http.routers.sonarr.entrypoints=https"
        - "traefik.http.routers.sonarr.tls=true"
        - "traefik.http.routers.sonarr.tls.certresolver=le"

  emby:
        image: lscr.io/linuxserver/emby:latest
        container_name: emby
        hostname: emby
        network_mode: proxy
        environment:
          - PUID
          - PGID
          - TZ
        volumes:
          - ${APP_PATH}emby:/config
          - ${DATA_PATH}media:/data/media
    
       # networks:
         #- socket
        # - proxy
        #ports:
          #- 8096:8096
        restart: unless-stopped
    
        labels:
        - "traefik.enable=true"
        - "traefik.http.routers.emby.rule=Host(`emby.${DOMAINN}`)"
        #- traefik.http.routers.emby.middlewares=chain-no-auth@file
        - "traefik.http.services.emby.loadbalancer.server.port=8096"
        - "traefik.http.routers.emby.entrypoints=https"
        - "traefik.http.routers.emby.tls=true"
        - "traefik.http.routers.emby.tls.certresolver=le"

  qb:
    image: lscr.io/linuxserver/qbittorrent:latest
    #image: ghcr.io/hotio/qbittorrent
    #image: binhex/arch-sabnzbd
    container_name: qbittorrent
    hostname: qb

    environment:
      - PUID
      - PGID
      - TZ
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
    volumes:
      - ${APP_PATH}qb1:/config
      - ${DATA_PATH}torrents:/data/torrents
    #network_mode: service:gluetun 
    networks:
    # - socket
     - proxy

    #ports:
    #  - 80:80
    restart: unless-stopped

    labels:
    # - deunhealth.restart.on.unhealthy=true
     - "traefik.enable=true"
     - "traefik.http.routers.qb.rule=Host(`qb.${DOMAINN}`)"
     - "traefik.http.services.qb.loadbalancer.server.port=8080"
     - "traefik.http.routers.qb.entrypoints=https"
     - "traefik.http.routers.qb.tls=true"
     - "traefik.http.routers.qb.tls.certresolver=le"    

 
 